function 


/**
   Get the number of sentences inside the text 
   
   @param text : string - Text where count the number of sentences
   @return {number} - Number of sentences
*/
function sentences( text ) {
    var sentences = 0;

    var allCarriageReturn = cleanText;
    // For each end lines or sentences add a point and carrige return.
    // Example:
    //   My mother going at home. He will go back friday. =>
    //   My mother going at home.
    //   He will go back friday.
    allCarriageReturn = allCarriageReturn.replace( /(\n|\. )/g, ".\n" );

    //Therefor the number of sentences is a number of the point preceded by
    //another symbol. The separator line will ignored because it haven't
    //nothing before. I believe that one sentence with less than three words is
    //absurde. ( the fourth character is a point by constructor )
    return allCarriageReturn.match( /(\w|.){4,}$/gm ).length;
}


const fs = require( 'fs' );
const spawnSync = require( 'child_process' ).spawnSync;

// The path MUST have above struct:
// res/section/all_file.tex

var path = process.argv[2]; // Expected one argument with the location of files
path += "res/sections/"; // Attach the location when all sections are store

var files = fs.readdirSync( path ); // Get all files 
var dcDetex = "";

console.log( `Detected this file:\n${files}` );

// Apply detex every files and append content at dcDetex
files.forEach( ( val, index, array ) => {
    var outSpawn = spawnSync( 'detex', [ path+val ] );
    dcDetex += `${outSpawn.stdout}\n`;
});

console.log( dcDetex );

// Remove all matched form dcDetex
var filter =
    "enumerate|" +
    "itemize|" +
    "center|" +
    "figure|" +
    "longtable|" +
    "description|" +
    "tabular|" +
    "table|" +
    "math|" +
    "=|" +
    "name|" +
    "\w+\/.*\.png" + // for image
    "\[.*\]|" + // latex various notation
    "p.*cm|" + // measure
    "\s1.8\s|" +
    "\s2.*c.*0\.9\s" +
    "\(|\)|" +
    "\t";

// Convert filter string in a regex exp with global visibility
var e = new RegExp( filter, "g" );
// Clean text catch
var cleanText = dcDetex.replace( e, "" );

return 89 + ( 300 * sentences( cleanText ) - 10 * letters( cleanText ) ) / words( cleanText );
